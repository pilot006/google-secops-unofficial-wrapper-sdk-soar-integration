{"Name":"Ping","Description":"","Script":"from SiemplifyAction import SiemplifyAction\nfrom SiemplifyUtils import unix_now, convert_unixtime_to_datetime, output_handler\nfrom ScriptResult import EXECUTION_STATE_COMPLETED, EXECUTION_STATE_FAILED,EXECUTION_STATE_TIMEDOUT\nfrom secops import SecOpsClient\nimport json\n\n\n@output_handler\ndef main():\n    siemplify = SiemplifyAction()\n\n    sa_key = siemplify.extract_configuration_param('Integration',\"JSON Service Account Key\")\n    instance_id = siemplify.extract_configuration_param('Integration',\"SecOps Customer ID\")\n    project_id = siemplify.extract_configuration_param('Integration',\"SecOps Project ID\")\n    secops_region = siemplify.extract_configuration_param('Integration',\"SecOps Region\")\n    sa_key = json.loads(sa_key)\n\n    # Initialize with service account info\n    client = SecOpsClient(service_account_info=sa_key)\n    # Initialize Chronicle client\n    chronicle = client.chronicle(\n        customer_id=instance_id,\n        project_id=project_id,\n        region=secops_region\n    )\n    log_types = chronicle.get_all_log_types()\n    if 'WINEVTLOG' in str(log_types):\n        status = EXECUTION_STATE_COMPLETED\n        output_message = \"OK\"\n        result_value = True\n    else:\n        status = EXECUTION_STATE_FAILED\n        output_message = \"Failed\"\n        result_value = False\n\n    siemplify.end(output_message, result_value, status)\n\n\nif __name__ == \"__main__\":\n    main()\n","IntegrationIdentifier":"SecOps Wrapper SDK","ScriptResultName":"ScriptResult","DynamicResultsMetadata":[{"ResultName":"JsonResult","ResultExample":"{}","ShowResult":false}],"Creator":"036fe879-4c16-461e-b6d9-b1c552806fa0","IsEnabled":true,"IsCustom":true,"IsSystem":false,"Version":5.0,"TimeoutSeconds":600,"IsAsync":false,"AsyncPollingIntervalInSeconds":3600,"TotalIntervalTimeoutForAsyncInSeconds":86400,"Parameters":[],"DefaultResultValue":"","PythonVersion":"None","SimulationData":{"Entities":null},"SimulationDataJson":null}