{"Name":"Query SecOps Gemini","Description":"","Script":"from SiemplifyAction import SiemplifyAction\nfrom SiemplifyUtils import unix_now, convert_unixtime_to_datetime, output_handler\nfrom ScriptResult import EXECUTION_STATE_COMPLETED, EXECUTION_STATE_FAILED,EXECUTION_STATE_TIMEDOUT\nfrom secops import SecOpsClient\nimport json\n\n\n\n@output_handler\ndef main():\n    siemplify = SiemplifyAction()\n    llm_prompt = siemplify.extract_action_param(\"Prompt\", print_value=True)\n\n    sa_key = siemplify.extract_configuration_param('Integration',\"JSON Service Account Key\")\n    instance_id = siemplify.extract_configuration_param('Integration',\"SecOps Customer ID\")\n    project_id = siemplify.extract_configuration_param('Integration',\"SecOps Project ID\")\n    secops_region = siemplify.extract_configuration_param('Integration',\"SecOps Region\")\n    sa_key = json.loads(sa_key)\n\n    # Initialize with service account info\n    client = SecOpsClient(service_account_info=sa_key)\n    # Initialize Chronicle client\n    chronicle = client.chronicle(\n        customer_id=instance_id,\n        project_id=project_id,\n        region=secops_region\n    )\n    # Query Gemini with a security question\n    response = chronicle.gemini(llm_prompt)\n\n    # Get text content (combines TEXT blocks and stripped HTML content)\n    text_explanation = response.get_text_content()\n    siemplify.LOGGER.info(\"get_text_content(): \" + text_explanation)\n\n    raw_response = response.get_raw_response()\n    # Work with different content blocks\n    for block in response.blocks:\n        print(f\"Block type: {block.block_type}\")\n        if block.block_type == \"TEXT\":\n            print(\"Text content:\", block.content)\n        elif block.block_type == \"CODE\":\n            print(f\"Code ({block.title}):\", block.content)\n        elif block.block_type == \"HTML\":\n            print(\"HTML content (with tags):\", block.content)\n\n    status = EXECUTION_STATE_COMPLETED\n    output_message = text_explanation\n    result_value = text_explanation\n    siemplify.end(output_message, result_value, status)\n\n\nif __name__ == \"__main__\":\n    main()\n","IntegrationIdentifier":"SecOps Wrapper SDK","ScriptResultName":"ScriptResult","DynamicResultsMetadata":[{"ResultName":"JsonResult","ResultExample":"{}","ShowResult":false}],"Creator":"036fe879-4c16-461e-b6d9-b1c552806fa0","IsEnabled":true,"IsCustom":true,"IsSystem":false,"Version":5.0,"TimeoutSeconds":120,"IsAsync":false,"AsyncPollingIntervalInSeconds":3600,"TotalIntervalTimeoutForAsyncInSeconds":86400,"Parameters":[{"CustomActionId":0,"IsMandatory":true,"DefaultValue":"Tell me about CVE-2021-44228","Description":"Prompt to send to SecOps Gemini for response","Name":"Prompt","Value":"Tell me about CVE-2021-44228","Type":0,"OptionalValues":null,"OptionalValuesJson":null}],"DefaultResultValue":"","PythonVersion":"None","SimulationData":{"Entities":null},"SimulationDataJson":null}