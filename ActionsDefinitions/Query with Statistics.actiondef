{"Name":"Query with Statistics","Description":"","Script":"from SiemplifyAction import SiemplifyAction\nfrom SiemplifyUtils import unix_now, convert_unixtime_to_datetime, output_handler\nfrom ScriptResult import EXECUTION_STATE_COMPLETED, EXECUTION_STATE_FAILED,EXECUTION_STATE_TIMEDOUT\nfrom secops import SecOpsClient\nfrom datetime import datetime, timedelta, timezone\nimport json\n\nfrom tabulate import tabulate\n\n\n\n@output_handler\ndef main():\n    siemplify = SiemplifyAction()\n\n    sa_key = siemplify.extract_configuration_param('Integration',\"JSON Service Account Key\")\n    instance_id = siemplify.extract_configuration_param('Integration',\"SecOps Customer ID\")\n    project_id = siemplify.extract_configuration_param('Integration',\"SecOps Project ID\")\n    secops_region = siemplify.extract_configuration_param('Integration',\"SecOps Region\")\n    sa_key = json.loads(sa_key)\n\n    stats_query = siemplify.extract_action_param(\"Stats Query\", print_value=True)\n    hours_back = siemplify.extract_action_param(\"Hours Back\", print_value=True)\n\n    # Initialize with service account info\n    client = SecOpsClient(service_account_info=sa_key)\n    # Initialize Chronicle client\n    chronicle = client.chronicle(\n        customer_id=instance_id,\n        project_id=project_id,\n        region=secops_region\n    )\n\n    # Set time range for queries\n    end_time = datetime.now(timezone.utc)\n    start_time = end_time - timedelta(hours=int(hours_back))\n\n    stats = chronicle.get_stats(\n        query=stats_query,\n        start_time=start_time,\n        end_time=end_time,\n        max_events=1000,\n        max_values=1000\n    )\n\n    column_headers = stats['columns']\n    table_data_for_tabulate = stats['rows']\n    formatted_rows = []\n    for row_dict in stats['rows']:\n        current_row = [row_dict.get(col, \"\") for col in column_headers] # Use .get for safety\n        formatted_rows.append(current_row)\n    ascii_table = tabulate(formatted_rows, headers=column_headers, tablefmt=\"grid\")\n    status = EXECUTION_STATE_COMPLETED\n    wall_message = \"<p style=\\\"font-family:'Courier New'\\\">\" + stats_query + \"<br><br>\" + ascii_table + \"</p>\"\n    siemplify.add_comment(comment=wall_message)\n    siemplify.result.add_result_json(stats)\n    output_message = \"Stats results written to case wall\"\n    result_value = None\n\n    siemplify.end(output_message, result_value, status)\n\n\nif __name__ == \"__main__\":\n    main()\n","IntegrationIdentifier":"SecOps Wrapper SDK","ScriptResultName":"ScriptResult","DynamicResultsMetadata":[{"ResultName":"JsonResult","ResultExample":"{}","ShowResult":true}],"Creator":"036fe879-4c16-461e-b6d9-b1c552806fa0","IsEnabled":true,"IsCustom":true,"IsSystem":false,"Version":13.0,"TimeoutSeconds":600,"IsAsync":false,"AsyncPollingIntervalInSeconds":3600,"TotalIntervalTimeoutForAsyncInSeconds":86400,"Parameters":[{"CustomActionId":0,"IsMandatory":true,"DefaultValue":"metadata.event_type = \"NETWORK_CONNECTION\"\nmatch:  \n  principal.ip, target.ip\noutcome:  \n  $count = count(metadata.id)\norder:  \n  $count desc\nlimit:\n  10","Description":"Query in stats format","Name":"Stats Query","Value":"metadata.event_type = \"NETWORK_CONNECTION\"\nmatch:  \n  principal.ip, target.ip\noutcome:  \n  $count = count(metadata.id)\norder:  \n  $count desc\nlimit:\n  10","Type":0,"OptionalValues":null,"OptionalValuesJson":null},{"CustomActionId":0,"IsMandatory":true,"DefaultValue":"24","Description":"How many hours back to run the query for.","Name":"Hours Back","Value":"24","Type":0,"OptionalValues":null,"OptionalValuesJson":null}],"DefaultResultValue":"","PythonVersion":"None","SimulationData":{"Entities":null},"SimulationDataJson":null}